<div class="formbook" data-controller="payment">
  <%= simple_form_for @booking, html: {  data: { action: "submit->payment#submit", payment_target: "form" } } do |f| %>
    <%= f.input :start_date, as: :string, label: 'Date de début de réservation', error: 'Vous devez être connecté pour réserver', input_html: { data: { controller: 'flatpickr' }} %>
    <%= f.input :end_date, as: :string, label: 'Date de fin de réservation', input_html: { data: { controller: 'flatpickr' }} %>
    <%= f.button :submit, 'Soumettre' %>

    <%= link_to 'Retour', pokemons_path%>
  <% end %>
  <div data-payment-target="payments" style="display: none;">
    <%= render 'bookings/payment' %>
    <script src="https://cdn.jsdelivr.net/gh/mattboldt/typed.js@latest/lib/typed.min.js"></script>
    <script>
      var app = new Vue({
        el: "#app",
        data() {
          return {
            componentKey: 0,
            currentCardBackground: Math.floor(Math.random() * 25 + 1),
            cardName: "",
            cardNumber: "",
            cardMonth: "",
            cardYear: "",
            cardCvv: "",
            minCardYear: new Date().getFullYear(),
            amexCardMask: "#### ###### #####",
            otherCardMask: "#### #### #### ####",
            cardNumberTemp: "",
            isCardFlipped: false,
            focusElementStyle: null,
            isInputFocused: false,
          };
        },
        methods: {
          init() {
            this.componentKey += 1;
            this.cardNumberTemp = this.otherCardMask;
            document.getElementById("cardNumber").focus();
            this.initTyped();
          },
          flipCard(status) {
            this.isCardFlipped = status;
          },
          focusInput(e) {
            this.isInputFocused = true;
            let targetRef = e.target.dataset.ref;
            let target = this.$refs[targetRef];
            this.focusElementStyle = {
              width: `${target.offsetWidth}px`,
              height: `${target.offsetHeight}px`,
              transform: `translateX(${target.offsetLeft}px) translateY(${target.offsetTop}px)`,
            };
          },
          blurInput() {
            let vm = this;
            setTimeout(() => {
              if (!vm.isInputFocused) {
                vm.focusElementStyle = null;
              }
            }, 300);
            vm.isInputFocused = false;
          },
          initTyped() {
            new Typed('#typed', {
              strings: ["First sentence.", "Second sentence."],
              typeSpeed: 30
            });
          },
        },
        computed: {
          getCardType() {
            let number = this.cardNumber;
            let re = new RegExp("^4");
            if (number.match(re) != null) return "visa";

            re = new RegExp("^(34|37)");
            if (number.match(re) != null) return "amex";

            re = new RegExp("^5[1-5]");
            if (number.match(re) != null) return "mastercard";

            re = new RegExp("^6011");
            if (number.match(re) != null) return "discover";

            re = new RegExp("^9792");
            if (number.match(re) != null) return "troy";

            return "visa";
          },
          generateCardNumberMask() {
            return this.getCardType === "amex"
              ? this.amexCardMask
              : this.otherCardMask;
          },
          minCardMonth() {
            if (this.cardYear === this.minCardYear)
              return new Date().getMonth() + 1;
            return 1;
          },
        },
        watch: {
          cardYear() {
            if (this.cardMonth < this.minCardMonth) {
              this.cardMonth = "";
            }
          },
        },
      });
      document.addEventListener("turbolinks:load", (event) => {
        app.init();
      });
    </script>
  </div>
</div>
